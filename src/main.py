# Python 3.10+
# pip install python-telegram-bot==21.6 flask==3.0.3
# –î–≤–∞ Telegram-–±–æ—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ (polling) + Flask health –Ω–∞ –ø–æ—Ä—Ç—É 8080.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è initialize/start/updater.start_polling (–±–µ–∑ run_polling).

import os
import asyncio
import logging
import threading
from io import BytesIO

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ---------- Logging ----------
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
    level=logging.INFO
)
log = logging.getLogger("dual-bots")

# ---------- Flask health ----------
flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"

def run_server():
    flask_app.run(host="0.0.0.0", port=8080)

# ---------- ENV / Config ----------
# –ë–æ—Ç ‚Ññ1 ‚Äî ¬´–∑–∞–∫–∞–∑—ã/–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏¬ª
TOKEN_MAIN   = os.getenv("BOT_TOKEN") or os.getenv("TG_BOT_TOKEN_MAIN")
ADMIN_ID     = os.getenv("ADMIN_ID")
ACCOUNT_INFO = os.getenv("ACCOUNT_INFO", "")

# –ë–æ—Ç ‚Ññ2 ‚Äî ¬´–∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π¬ª (–µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤—Ç–æ—Ä–æ–π –±–æ—Ç –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç)
TOKEN_AUCTION = os.getenv("TG_BOT_TOKEN_AUCTION")

if not TOKEN_MAIN or not ADMIN_ID:
    raise ValueError("BOT_TOKEN (–∏–ª–∏ TG_BOT_TOKEN_MAIN) –∏ ADMIN_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# ---------- In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±–æ—Ç–∞ ‚Ññ1 ----------
user_data: dict[int, dict] = {}  # { user_id: { name, reg_numbers, license_term, payment_status } }

# ---------- Handlers –¥–ª—è –±–æ—Ç–∞ ‚Ññ1 (—Ç–µ–∫—É—â–∏–π –±–æ—Ç) ----------
async def cmd_start_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {'name': '', 'reg_numbers': [], 'license_term': '', 'payment_status': None}
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫."
    )
    await update.message.reply_text(welcome_message)

async def cb_license_term(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    answer = query.data
    await query.answer()

    info = user_data.get(user_id)
    if not info:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    info['license_term'] = answer
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="no")],
    ]
    await query.message.reply_text("–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é?", reply_markup=InlineKeyboardMarkup(keyboard))

async def cb_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    answer = query.data
    await query.answer()

    info = user_data.get(user_id)
    if not info:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    info['payment_status'] = answer

    if answer == "yes":
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ.")
    else:
        reg_numbers_text = ', '.join(info['reg_numbers'])
        user = query.from_user
        username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
        caption = (
            f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
            f"–ò–º—è: {info['name']}\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
            f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {info['license_term']}\n"
            "–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=caption, parse_mode="Markdown")
        await query.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞—à [—Ñ–æ—Ä—É–º]({ACCOUNT_INFO})",
            parse_mode="Markdown"
        )

async def handle_message_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        if update.message:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    info = user_data[user_id]

    # --- –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ---
    if update.message and update.message.text:
        text = update.message.text
        if not info['name']:
            info['name'] = text
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ, {info['name']}! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (IGG). "
                "–ï—Å–ª–∏ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ',' –∏–ª–∏ –ø—Ä–æ–±–µ–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è."
            )
        elif not info['reg_numbers']:
            reg_numbers = [num.strip() for num in text.replace('\n', ',').replace(' ', ',').split(',') if num.strip()]
            info['reg_numbers'] = reg_numbers
            keyboard = [
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="–Ω–µ–¥–µ–ª—è")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("–ü–æ–ª–≥–æ–¥–∞", callback_data="–ø–æ–ª–≥–æ–¥–∞")],
            ]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text(
                "–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
            )
        return

    # --- –î–æ–∫—É–º–µ–Ω—Ç—ã/—Ñ–æ—Ç–æ ---
    if update.message and (update.message.document or update.message.photo):
        if not info['name']:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ù–∏–∫")
            return
        if not info['reg_numbers']:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ IGG")
            return
        if not info['license_term']:
            keyboard = [
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="–Ω–µ–¥–µ–ª—è")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("–ü–æ–ª–≥–æ–¥–∞", callback_data="–ø–æ–ª–≥–æ–¥–∞")],
            ]
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
            return

        if info.get('payment_status') == 'yes':
            try:
                if update.message.document:
                    file_id = update.message.document.file_id
                    file_name = update.message.document.file_name
                else:
                    file_id = update.message.photo[-1].file_id
                    file_name = "photo.jpg"

                f = await context.bot.get_file(file_id)
                file_bytes = await f.download_as_bytearray()
                stream = BytesIO(file_bytes); stream.seek(0)

                reg_numbers_text = ', '.join(info['reg_numbers'])
                user = update.message.from_user
                username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
                caption = (
                    f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
                    f"–ò–º—è: {info['name']}\n"
                    f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
                    f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {info['license_term']}\n"
                    "–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
                )

                await context.bot.send_document(chat_id=ADMIN_ID, document=stream, filename=file_name, caption=caption)
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ. –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! "
                    f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞—à [—Ñ–æ—Ä—É–º]({ACCOUNT_INFO})", parse_mode="Markdown"
                )
            except Exception as e:
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            reg_numbers_text = ', '.join(info['reg_numbers'])
            user = update.message.from_user
            username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
            caption = (
                f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
                f"–ò–º—è: {info['name']}\n"
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
                f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {info['license_term']}\n"
                "–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
            )
            await context.bot.send_message(chat_id=ADMIN_ID, text=caption, parse_mode="Markdown")
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
                f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞—à [—Ñ–æ—Ä—É–º]({ACCOUNT_INFO})", parse_mode="Markdown"
            )

# ---------- Handlers –¥–ª—è –±–æ—Ç–∞ ‚Ññ2 (–∞—É–∫—Ü–∏–æ–Ω–Ω—ã–π) ----------
async def cmd_start_auction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ê—É–∫—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–°—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–æ—Ç–∞—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏\n–í–≤–µ–¥–∏—Ç–µ /id —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä"
    )

async def cmd_id_auction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–∞–≤–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await update.message.reply_text(
        f"–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: <code>{update.effective_chat.id}</code>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ DoomsdayBot, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        parse_mode="HTML"
    )

# ---------- Builders ----------
def build_main_bot() -> Application:
    app = ApplicationBuilder().token(TOKEN_MAIN).build()
    app.add_handler(CommandHandler("start", cmd_start_main))
    app.add_handler(MessageHandler(filters.ALL, handle_message_main))
    app.add_handler(CallbackQueryHandler(cb_license_term, pattern=r"^(–Ω–µ–¥–µ–ª—è|–º–µ—Å—è—Ü|–ø–æ–ª–≥–æ–¥–∞)$"))
    app.add_handler(CallbackQueryHandler(cb_payment,      pattern=r"^(yes|no)$"))
    return app

def build_auction_bot() -> Application | None:
    if not TOKEN_AUCTION:
        log.info("TG_BOT_TOKEN_AUCTION –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤—Ç–æ—Ä–æ–π –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω (—ç—Ç–æ –æ–∫).")
        return None
    app = ApplicationBuilder().token(TOKEN_AUCTION).build()
    app.add_handler(CommandHandler("start", cmd_start_auction))
    app.add_handler(CommandHandler("id", cmd_id_auction))
    return app

# ---------- Main (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –±–µ–∑ run_polling) ----------
async def amain():
    # Flask health ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
    threading.Thread(target=run_server, daemon=True).start()

    app1 = build_main_bot()
    app2 = build_auction_bot()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await app1.initialize()
    if app2:
        await app2.initialize()

    # –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    await app1.start()
    if app2:
        await app2.start()

    # –°—Ç–∞—Ä—Ç polling (–ù–ï run_polling)
    await app1.updater.start_polling()
    if app2:
        await app2.updater.start_polling()

    # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å ¬´–∂–∏–≤—ã–º¬ª
    try:
        await asyncio.Event().wait()
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
        if app2:
            await app2.updater.stop()
        await app1.updater.stop()

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        if app2:
            await app2.stop()
            await app2.shutdown()
        await app1.stop()
        await app1.shutdown()

if __name__ == "__main__":
    asyncio.run(amain())
