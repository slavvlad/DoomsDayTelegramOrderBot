import os
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, File
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from flask import Flask
import threading

# Create a Flask application
flask_app = Flask(__name__)


@flask_app.route('/')
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"


def run_server():
    flask_app.run(host="0.0.0.0", port=8080)


# Dictionary to store user data
user_data = {}

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
ACCOUNT_INFO = os.getenv("ACCOUNT_INFO")

if not TOKEN or not ADMIN_ID:
    raise ValueError("BOT_TOKEN –∏ ADMIN_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")


# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data[user_id] = {'name': '', 'reg_numbers': [], 'license_term': '', 'payment_status': None}

    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫."
    )
    await update.message.reply_text(welcome_message)


# Handle license term selection
async def license_term_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    answer = query.data
    await query.answer()

    user_info = user_data.get(user_id)
    if not user_info:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    user_info['license_term'] = answer

    # Ask for payment confirmation
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é?", reply_markup=reply_markup)


# Handle payment response
async def payment_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    answer = query.data
    await query.answer()

    user_info = user_data.get(user_id)
    if not user_info:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    user_info['payment_status'] = answer

    if answer == "yes":
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ.")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª
        reg_numbers_text = ', '.join(user_info['reg_numbers'])
        user = query.from_user
        username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
        caption = (
            f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
            f"–ò–º—è: {user_info['name']}\n"
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
            f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {user_info['license_term']}\n"
            "–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–µ–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
        await context.bot.send_message(chat_id=ADMIN_ID, text=caption, parse_mode="Markdown")
        await query.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ.\n"
            f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞ –Ω–∞—à–µ–º [—Ñ–æ—Ä—É–º–µ]({ACCOUNT_INFO})",
            parse_mode="Markdown")


# Handle text messages
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    user_info = user_data[user_id]

    if update.message.text:
        text = update.message.text

        if not user_info['name']:
            user_info['name'] = text
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ, {user_info['name']}! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (IGG). –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ',' –∏–ª–∏ –ø—Ä–æ–±–µ–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è."
            )
        elif not user_info['reg_numbers']:
            reg_numbers = [num.strip() for num in text.replace('\n', ',').replace(' ', ',').split(',') if num.strip()]
            user_info['reg_numbers'] = reg_numbers
            # Ask for license term selection
            keyboard = [
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="–Ω–µ–¥–µ–ª—è")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("–ü–æ–ª–≥–æ–¥–∞", callback_data="–ø–æ–ª–≥–æ–¥–∞")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏:", reply_markup=reply_markup)
        #elif not user_info['license_term']:


        else:
            await update.message.reply_text("–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.")

    elif update.message.document or update.message.photo:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if not user_info['name']:
            await update.message.reply_text("C –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ù–∏–∫")
            return
        elif not user_info['reg_numbers']:
            await update.message.reply_text("C –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ IGG")
            return
        elif not user_info['license_term']:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏.")
            keyboard = [
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="–Ω–µ–¥–µ–ª—è")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("–ü–æ–ª–≥–æ–¥–∞", callback_data="–ø–æ–ª–≥–æ–¥–∞")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏:", reply_markup=reply_markup)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç—É
        if user_info.get('payment_status') == 'yes':
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ (–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ)
                if update.message.document:
                    file_id = update.message.document.file_id
                    file_name = update.message.document.file_name
                elif update.message.photo:
                    file_id = update.message.photo[-1].file_id
                    file_name = "photo.jpg"
                file = await context.bot.get_file(file_id)
                file_bytes = await file.download_as_bytearray()
                file_stream = BytesIO(file_bytes)
                file_stream.seek(0)

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
                reg_numbers_text = ', '.join(user_info['reg_numbers'])
                user = update.message.from_user
                username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
                caption = (
                    f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
                    f"–ò–º—è: {user_info['name']}\n"
                    f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
                    f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {user_info['license_term']}\n"
                    "–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
                await context.bot.send_document(chat_id=ADMIN_ID, document=file_stream, filename=file_name,
                                                caption=caption)
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ. –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–∏.\n"
                    f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞ –Ω–∞—à–µ–º [—Ñ–æ—Ä—É–º–µ]({ACCOUNT_INFO})",
                    parse_mode="Markdown")

            except Exception as e:
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–µ –≤—ã–±—Ä–∞–ª–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
            reg_numbers_text = ', '.join(user_info['reg_numbers'])
            user = update.message.from_user
            username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
            caption = (
                f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
                f"–ò–º—è: {user_info['name']}\n"
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
                f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {user_info['license_term']}\n"
                "–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
            )

            await context.bot.send_message(chat_id=ADMIN_ID, text=caption, parse_mode="Markdown")
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ.\n"
                f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞ –Ω–∞—à–µ–º [—Ñ–æ—Ä—É–º–µ]({ACCOUNT_INFO})",
                parse_mode="Markdown")


# Main function
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(license_term_response, pattern="^(–Ω–µ–¥–µ–ª—è|–º–µ—Å—è—Ü|–ø–æ–ª–≥–æ–¥–∞)$"))
    app.add_handler(CallbackQueryHandler(payment_response, pattern="^(yes|no)$"))

    app.run_polling()


# Start the web server in a separate thread
threading.Thread(target=run_server, daemon=True).start()

if __name__ == "__main__":
    main()
