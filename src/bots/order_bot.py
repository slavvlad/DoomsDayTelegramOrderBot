from __future__ import annotations

import logging
from dataclasses import dataclass, field
from io import BytesIO
from typing import Dict, List, Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

log = logging.getLogger(__name__)

# In-memory user state for the main bot
@dataclass
class UserInfo:
    name: str = ""
    reg_numbers: List[str] = field(default_factory=list)
    license_term: str = ""
    payment_status: Optional[str] = None  # "yes" | "no" | None

user_data: Dict[int, UserInfo] = {}

# ---------- Helpers ----------
def split_igg(raw: str) -> List[str]:
    """Split IGG list by comma/space/newline and remove empties."""
    return [s.strip() for s in raw.replace("\n", ",").replace(" ", ",").split(",") if s.strip()]

def md_or_plain(text_md: str, account_info: str) -> dict:
    """Return kwargs for reply_text: prefer Markdown when ACCOUNT_INFO is present."""
    if account_info:
        return {"text": text_md, "parse_mode": "Markdown"}
    return {"text": text_md.replace(f"[—Ñ–æ—Ä—É–º]({account_info})", "—Ñ–æ—Ä—É–º")}

# ---------- Handlers ----------
async def cmd_start_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    user_data[uid] = UserInfo()
    msg = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫."
    )
    if update.message:
        await update.message.reply_text(msg)

async def cb_license_term(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    uid = q.from_user.id
    info = user_data.get(uid)
    if not info:
        await q.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    info.license_term = q.data  # "–Ω–µ–¥–µ–ª—è" | "–º–µ—Å—è—Ü" | "–ø–æ–ª–≥–æ–¥–∞"
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="yes")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="no")],
    ]
    await q.message.reply_text("–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é?", reply_markup=InlineKeyboardMarkup(keyboard))

async def cb_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    if not q:
        return
    await q.answer()

    uid = q.from_user.id
    info = user_data.get(uid)
    if not info:
        await q.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    info.payment_status = q.data  # "yes" | "no"
    admin_chat_id: str = context.application.bot_data.get("ADMIN_CHAT_ID", "")
    account_info: str = context.application.bot_data.get("ACCOUNT_INFO", "")

    if info.payment_status == "yes":
        await q.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ.")
        return

    reg_numbers_text = ", ".join(info.reg_numbers)
    user = q.from_user
    username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
    caption = (
        f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
        f"–ò–º—è: {info.name}\n"
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
        f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {info.license_term}\n"
        "–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
    )
    await context.bot.send_message(chat_id=admin_chat_id, text=caption, parse_mode="Markdown")
    await q.message.reply_text(
        **md_or_plain(
            "–°–ø–∞—Å–∏–±–æ. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
            f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞—à [—Ñ–æ—Ä—É–º]({account_info})",
            account_info,
        )
    )

async def handle_message_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    if uid not in user_data:
        if update.message:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    info = user_data[uid]
    admin_chat_id: str = context.application.bot_data.get("ADMIN_CHAT_ID", "")
    account_info: str = context.application.bot_data.get("ACCOUNT_INFO", "")

    # Text flow
    if update.message and update.message.text:
        text = update.message.text.strip()
        if not info.name:
            info.name = text
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ, {info.name}! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (IGG). "
                "–ï—Å–ª–∏ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ',' –∏–ª–∏ –ø—Ä–æ–±–µ–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è."
            )
            return
        if not info.reg_numbers:
            info.reg_numbers = split_igg(text)
            keyboard = [
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="–Ω–µ–¥–µ–ª—è")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("–ü–æ–ª–≥–æ–¥–∞", callback_data="–ø–æ–ª–≥–æ–¥–∞")],
            ]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
            return

        await update.message.reply_text(
            "–í—ã —É–∂–µ –≤–≤–µ–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
        )
        return

    # Documents/Photos
    if update.message and (update.message.document or update.message.photo):
        if not info.name:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ù–∏–∫")
            return
        if not info.reg_numbers:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ IGG")
            return
        if not info.license_term:
            keyboard = [
                [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="–Ω–µ–¥–µ–ª—è")],
                [InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data="–º–µ—Å—è—Ü")],
                [InlineKeyboardButton("–ü–æ–ª–≥–æ–¥–∞", callback_data="–ø–æ–ª–≥–æ–¥–∞")],
            ]
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
            return

        if info.payment_status == "yes":
            try:
                if update.message.document:
                    file_id = update.message.document.file_id
                    filename = update.message.document.file_name or "document"
                else:
                    file_id = update.message.photo[-1].file_id
                    filename = "photo.jpg"

                f = await context.bot.get_file(file_id)
                file_bytes = await f.download_as_bytearray()
                stream = BytesIO(file_bytes); stream.seek(0)

                reg_numbers_text = ", ".join(info.reg_numbers)
                user = update.message.from_user
                username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
                caption = (
                    f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
                    f"–ò–º—è: {info.name}\n"
                    f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
                    f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {info.license_term}\n"
                    "–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
                )
                await context.bot.send_document(chat_id=admin_chat_id, document=stream, filename=filename, caption=caption)
                await update.message.reply_text(
                    **md_or_plain("–°–ø–∞—Å–∏–±–æ. –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É! "
                                  f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞—à [—Ñ–æ—Ä—É–º]({account_info})", account_info)
                )
            except Exception as e:
                log.exception("Error while processing receipt")
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            reg_numbers_text = ", ".join(info.reg_numbers)
            user = update.message.from_user
            username = f"@{user.username}" if user.username else f"[{user.full_name}](tg://user?id={user.id})"
            caption = (
                f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:\n"
                f"–ò–º—è: {info.name}\n"
                f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ (IGG): {reg_numbers_text}\n"
                f"–°—Ä–æ–∫ –ª–∏—Ü–µ–Ω–∑–∏–∏: {info.license_term}\n"
                "–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞."
            )
            await context.bot.send_message(chat_id=admin_chat_id, text=caption, parse_mode="Markdown")
            await update.message.reply_text(
                **md_or_plain("–°–ø–∞—Å–∏–±–æ. –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. "
                              f"–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞—à [—Ñ–æ—Ä—É–º]({account_info})", account_info)
            )

# ---------- Builder ----------
def build_main_bot(token: str) -> Application:
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", cmd_start_main))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_main))
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_message_main))
    app.add_handler(CallbackQueryHandler(cb_license_term, pattern=r"^(–Ω–µ–¥–µ–ª—è|–º–µ—Å—è—Ü|–ø–æ–ª–≥–æ–¥–∞)$"))
    app.add_handler(CallbackQueryHandler(cb_payment, pattern=r"^(yes|no)$"))
    return app
